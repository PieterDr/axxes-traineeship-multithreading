package com.axxes.traineeship.threading.buildingblocks;

import java.util.LinkedList;
import java.util.Queue;

public class ExerciseQueues {

    private static Queue<Object> requestQueue = new LinkedList<>();
    private static Queue<Object> responseQueue = new LinkedList<>();

    /*
     * Write a program in which 2 threads communicate through the given 2 queues.
     * One thread should put items on the requestQueue for another thread to process.
     * The results generated by the second thread should be put on the responseQueue for the initial thread.
     *
     * In a second step, improve the design of the program by using blocking queues.
     */
    public static void main(String[] args) throws InterruptedException {
        Thread t1 = new Thread(() -> {
            requestQueue.add("hello");
            requestQueue.add("world!");
            while (true) {
                Object response = responseQueue.poll();
                if (response != null) System.out.println(response);
                sleep(5);
            }
        });
        Thread t2 = new Thread(() -> {
            while (true) {
                Object request = requestQueue.poll();
                if (request != null) responseQueue.offer("Response: " + request);
                sleep(5);
            }
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }

    private static void sleep(int millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
