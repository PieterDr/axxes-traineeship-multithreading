package com.axxes.traineeship.threading.buildingblocks;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ExerciseQueues {

    private static BlockingQueue<String> requestQueue = new ArrayBlockingQueue<>(10);
    private static BlockingQueue<String> responseQueue = new ArrayBlockingQueue<>(10);

    /*
     * Write a program in which 2 threads communicate through the given 2 queues.
     * One thread should put items on the requestQueue for another thread to process.
     * The results generated by the second thread should be put on the responseQueue for the initial thread.
     *
     * In a second step, improve the design of the program by using blocking queues.
     */
    public static void main(String[] args) throws InterruptedException {
        Thread t1 = new Thread(() -> {
            try {
                requestQueue.put("hello");
                requestQueue.put("world!");
                while (true) {
                    String response = responseQueue.take();
                    System.out.println(response);
                    sleep(5);
                }
            } catch (InterruptedException e) {
                throw new RuntimeException();
            }
        });
        Thread t2 = new Thread(() -> {
            while (true) {
                try {
                    responseQueue.put("Response: " + requestQueue.take());
                    sleep(5);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }

    private static void sleep(int millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
